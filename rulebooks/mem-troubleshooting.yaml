---
- name: Prepare the knowledge map on localhost
  include_tasks: fetch-knowledge-map.yaml
        
- name: Delegate to localhost and call Rule-base for solution
  block:
        
    - name: Retrieve data from work knowledge map file
      set_fact:
        raw_path_data: "{{ lookup('file', '{{ init_knowledge_map_dir }}/{{ source_files[1] | basename }}').split('\n') }}"
        path_data: []
    
    - name: Convert raw data to j2 input data - list of list
      set_fact:
        path_data: "{{ path_data + [ line.split(',') ] }}"
      loop: "{{ raw_path_data }}"
      loop_control:
        loop_var: line
    
    
    - name: Generate body data for KIE call
      ansible.builtin.template:
        src: templates/input.j2
        dest: "{{ init_knowledge_map_dir }}/input.json"
    
    - name: Call KIE for rcommended solution
      ansible.builtin.uri:
        url: "{{ rule_base_url }}"
        method: POST
        status_code: [201, 200]
        return_content: true
        validate_certs: no
        headers:
          accept: application/json
          Content-Type: application/json
        body_format: json
        body: "{{ lookup('ansible.builtin.file','{{ init_knowledge_map_dir }}/input.json') }}"
      register: result
    
        
    - name: Recommended Solutions
      set_fact:
        kie_facts: "{{ result['json'] }}"


    - name: check if new solution is found
      command: /usr/bin/python3
      args:
        stdin: |
          import re
          find_solution = False

          for f in {{ kie_facts }}:
              find_solution = True
              f['implement'] = 'Execute TroubleShoot'
              print(f)
          print(find_solution)
      register: results

    # when knowledge is poorly definded,
    # no sulution can be recommended.
    - name: Failed to find Solution
      fail:
        msg: "Failed to find Solution"
      when:  not results.stdout_lines[-1] | bool

    - name: Solution is found and add action to event queue
      block:

      - set_fact:
          solution: "{{ results.stdout_lines[0] }}"

      - debug:
          msg: "{{ solution }}"

  when: "inventory_hostname == 'localhost'"
