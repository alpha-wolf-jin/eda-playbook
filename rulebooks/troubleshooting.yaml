- name: troubleshoot
  hosts: all
  gather_facts: false


  vars:
    rule_base_url: 'http://192.168.122.35:8080/path'
    #rule_base_url: 'http://192.168.122.35:8080/new_task'
    start: start
    end: end
    start_result: 2

    home_dir: '/root/ansi/eda-playbook/rulebooks/files/App_Slow_Knowledge_Map'
    init_knowledge_map_dir: '/tmp/192.168.122.51/root/ansi/eda-playbook/rulebooks/files'
  tasks:

  - name: Retrieve Knowledge map file to local
    block:
      - name: Store file into /tmp/fetched/host.example.com/tmp/somefile
        ansible.builtin.fetch:
          src: "{{ home_dir }}"
          dest: /tmp
        when: "inventory_hostname == '192.168.122.51'"
        register: result

      - debug: var=result

      - name: use the initial knowledge map
        shell: |
          cp {{ init_knowledge_map_dir }}/App_Slow_Knowledge_Map  {{ init_knowledge_map_dir }}/link_data_file
        when:  
          - event.init is defined
          - event.init | bool
          - "inventory_hostname == 'localhost'"
        register: result

      - debug: var=result

  - debug:
      msg: "{{ event }}"

  - name: Delegate to localhost
    block:
      - name: Init Knowlesge Map
        block:
        - name: replace weight 10
          ansible.builtin.replace:
            path: "{{ init_knowledge_map_dir }}/link_data_file"
            regexp: '0$'
            replace: '1'
        - name: replace weight 999
          ansible.builtin.replace:
            path: "{{ init_knowledge_map_dir }}/link_data_file"
            regexp: '999$'
            replace: '9'
        when:  
          - event.init is defined
          - not (event.init | bool)

          
      - name: Retrieve data from csv file
        set_fact:
          raw_path_data: "{{ lookup('file', '{{ init_knowledge_map_dir }}/link_data_file').split('\n') }}"
          path_data: []
      
      - name: Convert raw data to j2 input data - list of list
        set_fact:
          path_data: "{{ path_data + [ line.split(',') ] }}"
        loop: "{{ raw_path_data }}"
        loop_control:
          loop_var: line
      
      
      - name: Generate body data for KIE call
        ansible.builtin.template:
          src: /home/jinzha/troubleshoot-01/templates/input.j2
          dest: /home/jinzha/troubleshoot-01/files/input.json
      
      - name: Call KIE
        ansible.builtin.uri:
          url: "{{ rule_base_url }}"
          method: POST
          status_code: [201, 200]
          return_content: true
          validate_certs: no
          headers:
            accept: application/json
            Content-Type: application/json
          body_format: json
          body: "{{ lookup('ansible.builtin.file','/home/jinzha/troubleshoot-01/files/input.json') }}"
        register: result
      
      
          
      - name: Facts in working memory
        set_fact:
          kie_facts: "{{ result['json'] }}"


      - name: check if new routing is found
        command: /usr/bin/python3
        args:
          stdin: |
            import re
            find_solution = False

            for f in {{ kie_facts }}:
                find_solution = True
                f['implement'] = 'Execute TroubleShoot'
                print(f)
            print(find_solution)
        register: results

      - name: Failed to find Solution
        debug:
          msg: "Failed to find Solution"
        when:  not results.stdout_lines[-1] | bool

      - name: Solution is found and add action to event queue
        block:
        #- name: Found Solution
        #  debug:
        #    msg: "{{ results.stdout_lines[0] }}"

        - set_fact:
            solution: "{{ results.stdout_lines[0] }}"

        #- debug:
        #    msg: "{{ solution }}"

        - name: Send event to Kafka topic to trigger troubleshooting
          ansible.builtin.shell: |
            set timeout 300
            echo "{{ solution }}" | sed "s/'/\"/g" | bin/kafka-console-producer.sh --broker-list 192.168.122.33:9092 --topic quickstart-events
          args:
            chdir: /home/jinzha/kafka_2.13-3.3.1
        when:  results.stdout_lines[-1] | bool

    when: "inventory_hostname == 'localhost'"
